#New workflow as of August 2024. Meant to run remotely on pinnacles cluster.
#Takes complex (single analysis unit) collections, annotated with order
#Returns age models for dates and collections
#Requires "multi_colls.RData" and "functions.R" in same directory.
#Load data, functions, and libraries
require(here); require(oxcAAR); quickSetupOxcal(); require(dplyr); require(rlist)
i_am("workflow/scripts/chronologies_multiple.R")
source(here("workflow/scripts/functions.R"))
#load whole data set
dates <- read.csv(here("workflow/data/alldates.csv"))
multi <- subset(dates,dates$category == 2)
data <- split(multi, multi$collectionunitid)
#can pick subset for testing
data <- data[runif(3,min = 0,max = length(unique(names(data))))]
names(data)
#remove those that already ran
done <- as.numeric(unlist(sapply(dir(here("workflow/outputs/sampleages")),
function(x) return(strsplit(x,".csv")))))
data <- data[!names(data) %in% done]
data
data
names(data)
doone
done
data <- split(multi, multi$collectionunitid)
#can pick subset for testing
data <- data[runif(3,min = 0,max = length(unique(names(data))))]
#sort by number of dates
size <- sort(sapply(data,nrow))
data <- data[match(names(size),names(data))]
data
data <- split(multi, multi$collectionunitid)
#data <- data[c("4425","4417","5593")]
data <- data["35355"]
J <- 1
print(paste0(c("Collection",j,"of",length(data)),collapse=" "))
for (j in J:length(data)) {
print(paste0(c("Collection",j,"of",length(data)),collapse=" "))
result <- dateranges.multi(data[j])
#  write.csv(result$sampleages,here("workflow/outputs/sampleages",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
#  write.csv(result$chroncontrols,here("workflow/outputs/chroncontrols",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
}
result
chroncontrols
result$chroncontrols
data <- split(multi, multi$collectionunitid)
#can pick subset for testing
data <- data[runif(1,min = 0,max = length(unique(names(data))))]
for (j in J:length(data)) {
print(paste0(c("Collection",j,"of",length(data)),collapse=" "))
result <- dateranges.multi(data[j])
for (j in J:length(data)) {
print(paste0(c("Collection",j,"of",length(data)),collapse=" "))
result <- dateranges.multi(data[j])
write.csv(result$sampleages,here("workflow/outputs/sampleages",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
write.csv(result$chroncontrols,here("workflow/outputs/chroncontrols",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
}
for (j in J:length(data)) {
print(paste0(c("Collection",j,"of",length(data)),collapse=" "))
result <- dateranges.multi(data[j])
write.csv(result$sampleages,here("workflow/outputs/sampleages",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
write.csv(result$chroncontrols,here("workflow/outputs/chroncontrols",paste0(names(data)[j],".csv",collapse = "")),row.names = F)
}
result
data <- split(multi, multi$collectionunitid)
#data <- data[c("4425","4417","5593")]
data <- data["35355"]
result <- dateranges.multi(data[j])
data
dateranges.multi <- function(data, ordered = "unknown") {
#if units are ordered and non-NA, sort them
if (ordered == "unknown") {
if (is.null(data[[1]]$auorder) | any(is.na(data[[1]]$auorder))) {
ordered <- F
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid, ordered = F)
} else {
ordered <- T
order <- distinct(data[[1]][,c("analysisunitid","auorder")])
order <- order[order(order$auorder),]
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid,
ordered = T, levels = order$analysisunitid)
data[[1]] <- data[[1]][order(data[[1]]$analysisunitid),]
}
}
data[[1]] <- cleandates(data[[1]])
print(paste0(c("Site ",data[[1]]$siteid[1],", collection ",data[[1]]$collectionunitid[1],": ",
nrow(data[[1]])," dates, ",length(unique(data[[1]]$analysisunitid)),
" analysis units, ordered = ",ordered),collapse = ""))
if (nrow(data[[1]]) == 0) return()
#assemble oxcal code
reso <- max(c(10,10^(floor(log10(max(c(data[[1]]$errorolder,data[[1]]$erroryounger),na.rm=T))))/10))
if (ordered == T) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Sequence(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
} else if (ordered == F) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Phase(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
}
#run oxcal code and parse results
execute <- executeOxcalScript(code)
oxcalResult <- parseOxcalOutput(readOxcalOutput(execute),only.R_Date = F)
result <- extractChronology.multiple(oxcalResult)
return(result)
}
data
ordered <- F
#if units are ordered and non-NA, sort them
if (ordered == "unknown") {
if (is.null(data[[1]]$auorder) | any(is.na(data[[1]]$auorder))) {
ordered <- F
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid, ordered = F)
} else {
ordered <- T
order <- distinct(data[[1]][,c("analysisunitid","auorder")])
order <- order[order(order$auorder),]
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid,
ordered = T, levels = order$analysisunitid)
data[[1]] <- data[[1]][order(data[[1]]$analysisunitid),]
}
}
data[[1]] <- cleandates(data[[1]])
print(paste0(c("Site ",data[[1]]$siteid[1],", collection ",data[[1]]$collectionunitid[1],": ",
nrow(data[[1]])," dates, ",length(unique(data[[1]]$analysisunitid)),
" analysis units, ordered = ",ordered),collapse = ""))
if (nrow(data[[1]]) == 0) return()
#assemble oxcal code
reso <- max(c(10,10^(floor(log10(max(c(data[[1]]$errorolder,data[[1]]$erroryounger),na.rm=T))))/10))
if (ordered == T) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Sequence(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
} else if (ordered == F) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Phase(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
}
#run oxcal code and parse results
execute <- executeOxcalScript(code)
oxcalResult <- parseOxcalOutput(readOxcalOutput(execute),only.R_Date = F)
oxcalResult
code
unitDates.code
data <- data[[1]]
auid <- unique(data$analysisunitid)
auid
#returns only code, not modeling results
#does NOT contain collection beginning and ending boundaries
#for use in complex models
dateString <- vector(mode = "list",length = length(auid))
for (i in 1:length(auid)) {
rdates <- subset(data,data$analysisunitid %in% auid & data$agetypeid == "14C yr BP" | data$agetypeid == "Radiocarbon years BP" | data$agetypeid == "4")
rdates <- rdates[rev(order(rdates$age)),]
if (nrow(rdates) > 1) {
dateString[i] <- paste0(apply(rdates,1,assembleDateString),collapse = "\n      ")
} else if (nrow(rdates) == 1) {
dateString[i] <- assembleDateString(rdates)
}
}
dateString
codeString <- vector(mode = "list",length = length(auid))
for (i in 1:length(auid)) {
codeString[i] <- paste0("\n    ",
if (ordered == F) {
paste0("Sequence(\"AU ",auid[i],"\")\n   {\n    ",collapse = "")
},
"Boundary(beginAnalysisUnit);\n    Phase(\"Analysis Unit ",auid[i],"\")\n     {\n      ",
dateString[i],
"\n      Date(\"Event\");\n     };",
"\n    Boundary(endAnalysisUnit);",
if (ordered == F) {
"\n    };"
},
collapse = "")
}
codeString
unitDates.code <- function(data, ordered){
auid <- unique(data$analysisunitid)
#returns only code, not modeling results
#does NOT contain collection beginning and ending boundaries
#for use in complex models
dateString <- vector(mode = "list",length = length(auid))
for (i in 1:length(auid)) {
rdates <- subset(data,data$analysisunitid %in% auid & data$agetypeid == "14C yr BP" | data$agetypeid == "Radiocarbon years BP" | data$agetypeid == "4")
rdates <- rdates[rev(order(rdates$age)),]
if (nrow(rdates) > 1) {
dateString[i] <- paste0(apply(rdates,1,assembleDateString),collapse = "\n      ")
} else if (nrow(rdates) == 1) {
dateString[i] <- assembleDateString(rdates)
}
}
codeString <- vector(mode = "list",length = length(auid))
for (i in 1:length(auid)) {
codeString[i] <- paste0("\n    ",
if (ordered == F) {
paste0("Sequence(\"AU ",auid[i],"\")\n   {\n    ",collapse = "")
},
"Boundary(beginAnalysisUnit);\n    Phase(\"Analysis Unit ",auid[i],"\")\n     {\n      ",
dateString[i],
"\n      Date(\"Event\");\n     };",
"\n    Boundary(endAnalysisUnit);",
if (ordered == F) {
"\n    };"
},
collapse = "")
}
return(codeString)
}
data <- split(multi, multi$collectionunitid)
#data <- data[c("4425","4417","5593")]
data <- data["35355"]
#if units are ordered and non-NA, sort them
if (ordered == "unknown") {
if (is.null(data[[1]]$auorder) | any(is.na(data[[1]]$auorder))) {
ordered <- F
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid, ordered = F)
} else {
ordered <- T
order <- distinct(data[[1]][,c("analysisunitid","auorder")])
order <- order[order(order$auorder),]
data[[1]]$analysisunitid <- factor(data[[1]]$analysisunitid,
ordered = T, levels = order$analysisunitid)
data[[1]] <- data[[1]][order(data[[1]]$analysisunitid),]
}
}
data[[1]] <- cleandates(data[[1]])
print(paste0(c("Site ",data[[1]]$siteid[1],", collection ",data[[1]]$collectionunitid[1],": ",
nrow(data[[1]])," dates, ",length(unique(data[[1]]$analysisunitid)),
" analysis units, ordered = ",ordered),collapse = ""))
if (nrow(data[[1]]) == 0) return()
#assemble oxcal code
reso <- max(c(10,10^(floor(log10(max(c(data[[1]]$errorolder,data[[1]]$erroryounger),na.rm=T))))/10))
if (ordered == T) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Sequence(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
} else if (ordered == F) {
code <- paste0("Options()\n {\n  BCAD=FALSE;\n  Curve(\"IntCal20\",\"IntCal20.14c\");",
paste0("\n  Resolution=",reso,";\n };",collapse=""),
"\n Plot()\n {\n  Phase(\"Collection Unit ", names(data),"\")",
"\n  {",
paste0(unitDates.code(data[[1]], ordered = ordered),collapse = ""),
"\n  };\n };",collapse = "")
}
code
colls <- 28058
for (j in J:length(colls)) {
print(paste0(c("Collection",j,"of",length(colls)),collapse=" "))
result <- dateranges(colls[j],data = singleAU_uncal)
write.csv(result$sampleages,here("../outputs/sampleages/",paste0(colls[j],".csv",collapse = "")),row.names = F)
write.csv(result$chroncontrols,here("../outputs/chroncontrols/",paste0(colls[j],".csv",collapse = "")),row.names = F)
}
#New workflow as of April 2024. Meant to run remotely on pinnacles cluster.
#Takes simple (single analysis unit) collections
#Returns age models for dates and collections
#Requires "dates_for_analysis_smallmamm.csv" and "functions.R" in same directory.
#Load data, functions, and libraries
require(here); require(oxcAAR); quickSetupOxcal(); require(dplyr); require(rlist)
i_am("workflow/scripts/chronologies_simple.R")
source(here("workflow/scripts/functions.R"))
#import dates list
#dates <- read.csv(here("workflow/data/dates_for_analysis_smallmamm.csv"))
dates <- read.csv(here("workflow/data/alldates.csv"))
#Get uncalibrated dates with one analysis unit
singleAU_uncal <- subset(dates,dates$category == 1)
for (j in J:length(colls)) {
print(paste0(c("Collection",j,"of",length(colls)),collapse=" "))
result <- dateranges(colls[j],data = singleAU_uncal)
write.csv(result$sampleages,here("../outputs/sampleages/",paste0(colls[j],".csv",collapse = "")),row.names = F)
write.csv(result$chroncontrols,here("../outputs/chroncontrols/",paste0(colls[j],".csv",collapse = "")),row.names = F)
}
colls
subset(singleAU_uncal,singleAU_uncal$collectionunitid==colls)
subset(singleAU_uncal,singleAU_uncal$collectionunitid==colls) -> data
rm(data)
subset(singleAU_uncal,singleAU_uncal$collectionunitid==colls) -> coll_dates
coll_dates <- cleandates(coll_dates)
coll_dates
print(paste0(c("Site ",coll_dates$siteid[1],", collection ",collid,": ", nrow(coll_dates)," dates"),collapse = ""))
oxcalResult <- unitDates(coll_dates)
chronology <- extractChronology(oxcalResult)
source("~/GitHub/chronologies/workflow/scripts/functions.R", echo=TRUE)
chronology
AUage <- data.frame(
analysisunitid = rep(coll_dates$analysisunitid[1],2),
chronology.agemodel = c("event","bounds"),
sampleages.age = c(chronology$middle,NA),
sampleages.ageolder = c(chronology$begin.event,chronology$begin.bound),
sampleages.ageyounger = c(chronology$end.event,chronology$end.bound)
)
controls <- data.frame(unname(t(sapply(grep("^[0-9]",names(oxcalResult),value = T),
function(x) strsplit(x,"\\[|\\]")[[1]][1:2]))))
colnames(controls) <- c("geochronid","geochronology.labnumber")
controls
colnames(controls) <- c("geochronid","geochronology.labnumber")
AUage <- data.frame(
analysisunitid = rep(coll_dates$analysisunitid[1],2),
chronology.agemodel = c("event","bounds"),
sampleages.age = c(chronology$middle,NA),
sampleages.ageolder = c(chronology$begin.event,chronology$begin.bound),
sampleages.ageyounger = c(chronology$end.event,chronology$end.bound)
)
AUage <- data.frame(
analysisunitid = rep(coll_dates$analysisunitid[1],2),
chronology.agemodel = c("event","bounds"),
sampleages.age = c(chronology$middle,NA),
sampleages.ageolder = c(chronology$begin.event,chronology$begin.bound),
sampleages.ageyounger = c(chronology$end.event,chronology$end.bound)
)
AUage
controls <- data.frame(unname(t(sapply(grep("^[0-9]",names(oxcalResult),value = T),
function(x) strsplit(x,"\\[|\\]")[[1]][1:2]))))
controls
names(oxcalResult)
coll_dates
sapply(grep("^[0-9]",names(oxcalResult),value = T)
grep("^[0-9]",names(oxcalResult),value = T)
names(oxcalResult)
names(oxcalResult)[3]
execute(names(oxcalResult)[3])
?do.call
coll_dates$labnumber
coll_dates$labnumber <- "WAT-1765/SFU-30"
oxcalResult <- unitDates(coll_dates)
chronology <- extractChronology(oxcalResult)
AUage <- data.frame(
analysisunitid = rep(coll_dates$analysisunitid[1],2),
chronology.agemodel = c("event","bounds"),
sampleages.age = c(chronology$middle,NA),
sampleages.ageolder = c(chronology$begin.event,chronology$begin.bound),
sampleages.ageyounger = c(chronology$end.event,chronology$end.bound)
)
controls <- data.frame(unname(t(sapply(grep("^[0-9]",names(oxcalResult),value = T),
function(x) strsplit(x,"\\[|\\]")[[1]][1:2]))))
controls
colls
dates[dates$collectionunitid==colls,]
dates[dates$collectionunitid==colls,"labnumber"] <-"WAT-1765/SFU-30"
write.csv(dates,here("workflow/data/alldates.csv"),row.names = F)
