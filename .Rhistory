temp <- get_from_tilia(meth = "getsampleparents",
param = "sampleid",
value = x)
if (length(temp$data) > 0){
sampleids[[i]] <- data.frame(sampleid = as.numeric(x),temp$data$analysisunitid)
}
}
I <- i + 1; J <- min(c(nrow(sampleids),(i + 100)))
}
sampleids.df <- distinct(list.stack(sampleids)[,c("sampleid","analysisunitid")])
sampleids[[1]]
sampleids[[2]]
sampleids.df <- distinct(list.stack(sampleids)[,c("sampleid","temp.data.analysisunitid")])
colnames(sampleids.df) <- c("sampleid","analysisunitid")
head(sampleids.df)
oldsampleages <- inner_join(oldchron_samp,sampleids.df,by = "sampleid")
head(oldsampleages)
dim(oldsampleages)
dim(distinct(oldsampleages))
compare_sampleages <- inner_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"))
colnames(compare_sampleages) <- c("collectionunitid","analysisunitid","new.chrontype","new.age", "ageolder_new","ageyounger_new","old.chronologyid","old.chronologyname","old.chron.ageolder","old.chron.ageyounger","old.agetype","old.agemodel","sampleid","old.sample.age","old.sample.ageyounger","old.sample.ageolder")
dim(compare_sampleages)
compare_sampleages <- left_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"), relationship = "many-to-many")
colnames(compare_sampleages) <- c("collectionunitid","analysisunitid","new.chrontype","new.age", "ageolder_new","ageyounger_new","old.chronologyid","old.chronologyname","old.chron.ageolder","old.chron.ageyounger","old.agetype","old.agemodel","sampleid","old.sample.age","old.sample.ageyounger","old.sample.ageolder")
dim(compare_sampleages)
colnames(compare_sampleages)
compare_sampleages <- left_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"), relationship = "many-to-many")
colnames(compare_sampleages)
compare_sampleages <- left_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"), relationship = "many-to-many")
colnames(compare_sampleages)
compare_sampleages$by
oldchron_samp <- data.frame(dplyr::inner_join(chrons, sampleages.df, by = "chronologyid"))
oldsampleages <- inner_join(oldchron_samp,sampleids.df,by = "sampleid")
compare_sampleages <- left_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"), relationship = "many-to-many")
colnames(compare_sampleages)
compare_sampleages$temp.data
colnames(oldchron_samp)
colnames(sampleages.df)
sampleages[[1]]
sampleages.df <- distinct(list.stack(sampleages, fill=TRUE))
head(sampleages.df)
sampleages.df <- distinct(list.stack(sampleages, fill = TRUE))[,1:5]
head(sampleages.df)
oldchron_samp <- data.frame(dplyr::inner_join(chrons, sampleages.df, by = "chronologyid"))
oldsampleages <- inner_join(oldchron_samp,sampleids.df,by = "sampleid")
compare_sampleages <- left_join(distinct(newchron.all[,1:6]),distinct(oldsampleages),
by = c("analysisunitid","collectionunitid"), relationship = "many-to-many")
colnames(compare_sampleages)
colnames(compare_sampleages) <- c("collectionunitid","analysisunitid","new.chrontype","new.age", "ageolder_new","ageyounger_new","old.chronologyid","old.chronologyname","old.chron.ageolder","old.chron.ageyounger","old.agetype","old.agemodel","sampleid","old.sample.age","old.sample.ageyounger","old.sample.ageolder")
compare_sampleages <- split(compare_sampleages,compare_sampleages$new.chrontype)
head(compare_chrons)
head(compare_chrons$bounds)
colnames(compare_chrons$bounds)
#chronology ranges
sapply(compare_chrons, function(x) {
x$old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
x$new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
x$agediff_older <- x$old.ageboundolder - x$new.ageboundolder
x$agediff_younger <- x$old.ageboundyounger - x$new.ageboundyounger
})
head(compare_chrons)
colnames(compare_chrons)
colnames(compare_chrons$bounds)
compare_chrons -> stash
#chronology ranges
sapply(compare_chrons, function(x) {
old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
ageshift_older <- x$old.ageboundolder - x$new.ageboundolder
ageshift_younger <- x$old.ageboundyounger - x$new.ageboundyounger
x <- data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_younger)
})
head(compare_chrons$bounds)
#chronology ranges
temp <- sapply(compare_chrons, function(x) {
old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
ageshift_older <- x$old.ageboundolder - x$new.ageboundolder
ageshift_younger <- x$old.ageboundyounger - x$new.ageboundyounger
return(data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_younger))
})
temp
#chronology ranges
temp <- sapply(compare_chrons, function(x) {
old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
ageshift_older <- x$old.ageboundolder - x$new.ageboundolder
ageshift_younger <- x$old.ageboundyounger - x$new.ageboundyounger
return(data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_younger))
}, simplify = F)
temp
head(temp)
str(temp)
temp$bounds$ageshift_younger
colnames(compare_sampleages)
colnames(compare_sampleages$bounds)
#sample ranges
compare_sampleages <- sapply(compare_sampleages, function(x) {
old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
ageshift_older <- x$old.ageboundolder - x$new.ageboundolder
ageshift_median <- x$old.sample.age - x$new.age
ageshift_younger <- x$old.ageboundyounger - x$new.ageboundyounger
return(data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_median, ageshift_younger))
}, simplify = F)
#sample ranges
compare_sampleages <- sapply(compare_sampleages, function(x) {
old.agediff <- x$old.sample.ageolder - x$old.sample.ageyounger
new.agediff <- x$ageolder_new - x$ageyounger_new
ageshift_older <- x$old.sample.ageolder - x$ageolder_new
ageshift_median <- x$old.sample.age - x$new.age
ageshift_younger <- x$old.sample.ageyounger - x$ageyounger_new
return(data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_median, ageshift_younger))
}, simplify = F)
head(compare_sampleages$bounds)
sapply(compare_sampleages, function(x) {
return(data.frame(mean(x$ageshift_median, na.rm = T),
mean(x$ageshift_older, na.rm = T),
mean(x$ageshift_younger, na.rm = T)))
})
sapply(compare_sampleages, function(x) {
return(data.frame(Age = mean(x$ageshift_median, na.rm = T),
Older = mean(x$ageshift_older, na.rm = T),
Younger = mean(x$ageshift_younger, na.rm = T)))
})
t(sapply(compare_sampleages, function(x) {
return(data.frame(Age = mean(x$ageshift_median, na.rm = T),
Older = mean(x$ageshift_older, na.rm = T),
Younger = mean(x$ageshift_younger, na.rm = T)))
}))
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Age = mean(x$ageshift_median, na.rm = T),
Older = mean(x$ageshift_older, na.rm = T),
Younger = mean(x$ageshift_younger, na.rm = T)))
}))
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
rbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = mean(x$ageshift_older, na.rm = T),
Chron_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
)
rbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = mean(x$ageshift_older, na.rm = T),
Chron_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
)
cbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = mean(x$ageshift_older, na.rm = T),
Chron_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
)
colnames(compare_chrons)
colnames(compare_chrons$bounds)
#chronology ranges
compare_chrons <- sapply(compare_chrons, function(x) {
old.agediff <- x$old.ageboundolder - x$old.ageboundyounger
new.agediff <- x$new.ageboundolder - x$new.ageboundyounger
ageshift_older <- x$old.ageboundolder - x$new.ageboundolder
ageshift_younger <- x$old.ageboundyounger - x$new.ageboundyounger
return(data.frame(x, old.agediff, new.agediff, ageshift_older, ageshift_younger))
}, simplify = F)
colnames(compare_chrons$bounds)
cbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = mean(x$ageshift_older, na.rm = T),
Chron_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
)
Table2 <- cbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = mean(x$ageshift_median, na.rm = T),
Sample_Older = mean(x$ageshift_older, na.rm = T),
Sample_Younger = mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = mean(x$ageshift_older, na.rm = T),
Chron_Younger = mean(x$ageshift_younger, na.rm = T)))
}))
)
Table2
Table2 <- cbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = -mean(x$ageshift_median, na.rm = T),
Sample_Older = -mean(x$ageshift_older, na.rm = T),
Sample_Younger = -mean(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = -mean(x$ageshift_older, na.rm = T),
Chron_Younger = -mean(x$ageshift_younger, na.rm = T)))
}))
)
Table2
return(data.frame(Chron_Older = -median(x$ageshift_older, na.rm = T),
Chron_Younger = -median(x$ageshift_younger, na.rm = T)))
Table2 <- cbind(
t(sapply(rev(compare_sampleages), function(x) {
return(data.frame(Sample_Age = -median(x$ageshift_median, na.rm = T),
Sample_Older = -median(x$ageshift_older, na.rm = T),
Sample_Younger = -median(x$ageshift_younger, na.rm = T)))
})),
t(sapply(rev(compare_chrons), function(x) {
return(data.frame(Chron_Older = -median(x$ageshift_older, na.rm = T),
Chron_Younger = -median(x$ageshift_younger, na.rm = T)))
}))
)
Table2
apply(alldates,2,function(x) length(unique(x)))
table(alldates$geochrontypeid)
length(alldates)
cleandates <- cleandates(alldates)
table(cleandates$geochronid)
table(cleandates$geochrontypeid)
dim(cleandates)
7790-7698
apply(cleandates,2,function(x) length(unique(x)))
temp <- read.csv("data/dates_for_analysis_allvert.csv")
rm(temp)
dim(alldates)
dim(cleandates)
setdiff(alldates,cleandates)
temp <- setdiff(alldates,cleandates)
cleandates <- function(data){
drop <- which(is.na(data$age) | is.na(data$errorolder) | is.na(data$erroryounger) |
data$age < 50 | data$errorolder == 0 |
data$infinite == TRUE | data$human == TRUE | data$rejected == TRUE)
if (length(drop) > 0) {result <- data[-drop,]} else {result <- data}
return(result)
}
clean_dates <- cleandates(alldates)
dropped_dates <- setdiff(alldates,cleandates)
dropped_dates <- setdiff(alldates,clean_dates)
table(alldates$agetypeid)
table(alldates$geochrontypeid)
cleandates_report <- function(data){
cleandates_report <- function(data){
drop_counts <- data.frame(noage = length(which(is.na(data$age))),
noerror = length(which(is.na(data$errorolder) | is.na(data$erroryounger | data$errorolder == 0))),
infinite_or_modern = length(which(data$age < 50  | data$infinite == TRUE)),
rejected = length(which(data$rejected == TRUE)),
human = length(which(data$human == TRUE)),
no14C = nrow(subset(data, !data$collectionunitid %in%
subset(data, data$geochrontypeid == "Carbon=14")$collectionunitid))
)
return(drop_counts)
}
cleandates_report(alldates)
cleandates_report <- function(data){
drop_counts <- data.frame(noage_or_error = length(which(is.na(data$age) |
is.na(data$errorolder) |
is.na(data$erroryounger) |
data$errorolder == 0)),
infinite_or_modern = length(which(data$age < 50  | data$infinite == TRUE)),
rejected = length(which(data$rejected == TRUE)),
human = length(which(data$human == TRUE)),
no14C = nrow(subset(data, !data$collectionunitid %in%
subset(data, data$geochrontypeid == "Carbon=14")$collectionunitid))
)
return(drop_counts)
}
cleandates_report(alldates)
cleandates_report <- function(data){
drop_counts <- data.frame(infinite_or_modern = length(which(data$age < 50  | data$infinite == TRUE)),
noage_or_error = length(which(is.na(data$age) |
is.na(data$errorolder) |
is.na(data$erroryounger) |
data$errorolder == 0)),
rejected = length(which(data$rejected == TRUE)),
human = length(which(data$human == TRUE)),
no14C = nrow(subset(data, !data$collectionunitid %in%
subset(data, data$geochrontypeid == "Carbon=14")$collectionunitid))
)
return(drop_counts)
}
cleandates_report(alldates)
nrow(subset(alldates,!alldates$collectionunitid %in% subset(alldates, alldates$geochronid == "Carbon-14")$collectionunitid))
nrow(subset(alldates,!alldates$collectionunitid %in% subset(alldates, alldates$geochrontypeid == "Carbon-14")$collectionunitid))
cleandates_report <- function(data){
drop_counts <- data.frame(infinite_or_modern = length(which(data$age < 50  | data$infinite == TRUE)),
noage_or_error = length(which(is.na(data$age) |
is.na(data$errorolder) |
is.na(data$erroryounger) |
data$errorolder == 0)),
rejected = length(which(data$rejected == TRUE)),
human = length(which(data$human == TRUE)),
no14C = nrow(subset(data, !data$collectionunitid %in%
subset(data, data$geochrontypeid == "Carbon-14")$collectionunitid))
)
return(drop_counts)
}
cleandates_report(alldates)
length(unique(dropped_dates$collectionunitid))
length(unique(!dropped_dates$collectionunitid %in% clean_dates$collectionunitid))
alldates.clean
temp <- read.csv("data/dates_for_analysis_smallmamm.csv")
dim(temp)
dim(alldates)
rawdates <- read.csv(here("data/dates_for_analysis_smallmamm.csv"))
rm(temp)
head(rawdates)
cleandates_report(rawdates)
rawdates
rawdates -> alldates
analunitnames <- data.frame(auid = unique(alldates$analysisunitid),auname = NA)
I <- 1
for (i in I:nrow(analunitnames)) {
res <- try(get_from_tilia(values = analunitnames$auid[i],
params = "analunitid", meth = "getanalysisunitbyid"))
if (length(res$data) > 0) analunitnames$auname[i] <- res$data$analysisunitname
}
alldates$analysisunitname <- analunitnames[match(alldates$analysisunitid,analunitnames$auid),]$auname
fakelabnumbers <- paste0("TEMP",1:length(which(is.na(alldates$labnumber))))
alldates[which(is.na(alldates$labnumber)),"labnumber"] <- fakelabnumbers
alldates$human <- FALSE
human_strings <- c("Teeth, Homo","Bone, Homo","human bone","Homo sapiens bone","Human skull")
alldates[which(apply(sapply(human_strings,function(x) grepl(x,alldates$materialdated)),1,any)),"human"] <- TRUE
alldates[which(apply(sapply(human_strings,function(x) grepl(x,alldates$notes)),1,any)),"human"] <- TRUE
rejected_strings <- c("Date rejected","date rejected"," too ","contaminated")
unique(alldates[which(apply(sapply(rejected_strings,function(x) grepl(x,alldates$notes)),1,any)),"notes"])
alldates[which(apply(sapply(rejected_strings,function(x) grepl(x,alldates$notes)),1,any)),"rejected"] <- TRUE
sapply(alldates,function(x) length(!is.na(x)))
sapply(alldates,function(x) length(x==TRUE))
sapply(alldates,function(x) length(isTRUE(x)))
sapply(alldates,function(x) length(which(isTRUE(x))))
which(alldates$human == TRUE)
sapply(alldates,function(x) length(which(x == TRUE)))
cleandates_report(rawdates)
cleandates_report(rawdates)
write.csv(alldates,here("data/rawdates.csv"))
rawdates <- read.csv(here("data/rawdates.csv"))
cleandates_report(rawdates)
cleandates_report(rawdates)
alldates$category <- NA
alldates.clean <- subset(alldates,alldates$infinite == FALSE &
alldates$rejected == FALSE &
alldates$human == FALSE)
collids.cat <- data.frame(collid = unique(alldates.clean$collectionunitid))
collids.cat$category <- NA
for (i in 1:length(collids.cat$collid)) {
dd <- which(alldates.clean$collectionunitid == collids.cat$collid[i])
if (any(alldates.clean[dd,]$agetypeid != "Radiocarbon years BP")) {
if (any(alldates.clean[dd,]$agetypeid == "Radiocarbon years BP")) {
collids.cat[i,"category"] <- 3 } else { collids.cat[i,"category"] <- 4 }
} else {
if (length(unique(alldates.clean[dd,]$analysisunitid)) == 1) {
collids.cat[i,"category"] <- 1 } else { collids.cat[i,"category"] <- 2 }
}
}
alldates$category <- collids.cat$category[match(alldates$collectionunitid,collids.cat$collid)]
write.csv(alldates,here("data/alldates_allcategories.csv"),row.names = F)
allcategories <- read.csv(here("data/alldates_allcategories.csv"))
table(allcategories$category)
length(unique(subset(allcategories,allcategories$category == 4)$collectionunitid))
cleandates_report(rawdates)
cleandates_report <- function(data){
drop_counts <- data.frame(infinite_or_modern = length(which(data$age < 50  | data$infinite == TRUE)),
noage_or_error = length(which(is.na(data$age) |
is.na(data$errorolder) |
is.na(data$erroryounger) |
data$errorolder == 0)),
rejected = length(which(data$rejected == TRUE)),
human = length(which(data$human == TRUE))
)
return(drop_counts)
}
cleandates_report(rawdates)
if (!exists("alldates")) alldates <- read.csv(here("data/alldates.csv"))
rm(alldates)
if (!exists("alldates")) alldates <- read.csv(here("data/alldates.csv"))
apply(cleandates(alldates),2,function(x) length(unique(x)))
apply(cleandates(alldates)[,c("siteid","collectionunitid","analysisunitid","geochronid")],2,function(x) length(unique(x)))
#counts of unique ids
length(which(cleandates(alldates)$geochrontypeid != "Carbon-14"))
#counts of unique ids
non14C <- length(which(cleandates(alldates)$geochrontypeid != "Carbon-14"))
non14C
#count of non-radiocarbon dates
nrow(cleandates(alldates)) - non14C
#counts of unique ids
datetypecounts <- data.frame(Carbon14 = length(which(clean_dates$geochrontypeid == "Carbon-14")),
Other = length(which(clean_dates$geochrontypeid != "Carbon-14")))
datetypecounts
#date type counts
apply(clean_dates[,c("siteid","collectionunitid","analysisunitid","geochronid")],2,
function(x) length(unique(x)))
table(clean_dates$geochrontypeid)
table(clean_dates$agetypeid)
head(alldates)
newdates <- read.csv(here("outputs/newdates_uploaded.csv"))
newdates <- read.csv(here("outputs/newdates-uploaded.csv"))
head(newdates)
dim(newdates)
apply(newdates[,c("ndb.geochronology.geochronid","ndb.collectionunits.collectionunitid","ndb.sites.siteid")],2,function(x) length(unique(x)))
nrow(newchron.range)
length(unique(newchron.range$collectionunitid))
if (!exists("newchron.ctrls")) newchron.all <- read.csv(here("outputs/new_chroncontrols.csv"))
if (!exists("newchron.ctrls")) newchron.all <- read.csv(here("outputs/new_caldates.csv"))
length(unique(newchron.ctrls))
newchron.all <- read.csv(here("outputs/new_chroncontrols.csv"))
newchron.all <- read.csv(here("outputs/new_sampleages.csv"))
newchron.ctrls <- read.csv(here("outputs/new_caldates.csv"))
nrow(newchron.ctrls)
length(unique(newchron.ctrls$geochronid))
table(newchron.ctrls$chroncontroltypeid)
length(which(is.na(newchron.ctrls$geochronid)))
duplicated(newchron.ctrls$geochronid)
which(duplicated(newchron.ctrls$geochronid))
apply(newchron.ctrls,2,function(x) length(unique(x)))
dim(distinct(newchron.ctrls))
apply(newchron.all,2,function(x) length(unique(x)))
dim(newchron.all)
nrow(newchron.ctrls)/2
subset(newchron.all,newchron.all$chronology.agemodel=="event")
table(subset(newchron.all,newchron.all$chronology.agemodel == "event")$source)
length(which(!newchron.ctrls$collectionunitid %in% chrons$collectionunitid))
length(which(newchron.ctrls$collectionunitid %in% chrons$collectionunitid))
test <- subset(newchron.all,newchron.all$chronology.agemodel == "event")
table(test$source)
length(which(!test$collectionunitid %in% chrons$collectionunitid))
length(which(test$collectionunitid %in% chrons$collectionunitid))
test <- subset(newchron.range,newchron.range$agemodel == "event")
length(which(test$collectionunitid %in% chrons$collectionunitid))
length(which(!test$collectionunitid %in% chrons$collectionunitid))
length(which(test$collectionunitid %in% chrons$collectionunitid))
dim(chrons)
table(chrons$agetype)
7+160+166
which(is.na(compare_sampleages$bounds$old.sample.ageolder))
which(!compare_sampleages$bounds$collectionunitid%in%chrons$collectionunitid)
subset(compare_sampleages,!compare_sampleages$bounds$collectionunitid%in%chrons$collectionunitid)
subset(compare_sampleages$bounds,!compare_sampleages$bounds$collectionunitid%in%chrons$collectionunitid)
Table2
colnames(compare_sampleages)
colnames(compare_sampleages$bounds)
return(mean(x$new.agediff, na.rm=T) - mean(x$old.agediff, na.rm=T))
sapply(compare_sampleages, function(x) {
return(mean(x$new.agediff, na.rm=T) - mean(x$old.agediff, na.rm=T))
})
sapply(compare_sampleages, function(x) {
return(mean(x$new.agediff - x$old.agediff, na.rm=T))
})
sapply(compare_sampleages, function(x) {
return(data.frame(
mean(x.old$agediff, na.rm=T),
mean(subset(x$new.agediff, !is.na(x$old.agediff)), na.rm=T),
mean(x$new.agediff - x$old.agediff, na.rm=T))
)
})
sapply(compare_sampleages, function(x) {
return(data.frame(
mean(x$old.agediff, na.rm=T),
mean(subset(x$new.agediff, !is.na(x$old.agediff)), na.rm=T),
mean(x$new.agediff - x$old.agediff, na.rm=T))
)
})
sapply(compare_sampleages, function(x) {
return(data.frame(
old.agediff = mean(x$old.agediff, na.rm=T),
new.agediff = mean(subset(x$new.agediff, !is.na(x$old.agediff)), na.rm=T),
difference = mean(x$new.agediff - x$old.agediff, na.rm=T))
)
})
Table2
test <- compare_sampleages$event
sapply(compare_sampleages, function(x) {
return(data.frame(
old.agediff = median(x$old.agediff, na.rm=T),
new.agediff = median(subset(x$new.agediff, !is.na(x$old.agediff)), na.rm=T),
difference = median(x$new.agediff - x$old.agediff, na.rm=T))
)
})
colnames(chrons)
colnames(compare_chrons)
colnames(compare_chrons$bounds)
sapply(compare_chrons, function(x) {
return(data.frame(
old.agediff = median(x$old.agediff, na.rm=T),
new.agediff = median(subset(x$new.agediff, !is.na(x$old.agediff)), na.rm=T),
difference = median(x$new.agediff - x$old.agediff, na.rm=T))
)
})
